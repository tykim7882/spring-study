<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">
<!-- 여러개 설정파일 사용시 -->
	<import resource="collectionTest.xml"/>
	
	<!-- id는 생략가능, 고유한 값 -->
	<!-- class는 가급적 자동완성기능 사용, 패키지~클래스 정확히 명시 -->
	<!-- init-method : 컨테이너 구동 되어 객체 생성 직후 호출 -->
	<!-- destroy-method : 스프링컨테이너가 객체를 삭제하기 직전 호출 -->
	<!-- lazy-init : 자주 사용되지 않는 경우 클라이언트 요청 시점에 생성(메모리 관리) -->
	<!-- scope="singleton" bean의 사용범위 (기본값은 싱글톤), 단 하나만 생성되어 운용 -->
	<!-- 모든 객체는 기본생성자 호출을 원칙 -->
	<!-- 
	<bean id="tv" class="polimorphism.SamsungTV" init-method="initMethod" destroy-method="destroyMethod" lazy-init="true" scope="singleton"> -->
		<!-- 생성자가 여러개 오버로딩 시 index 사용하여 매핑 가능 -->
		<!--  
		<constructor-arg index="0" ref="apple"></constructor-arg>
		<constructor-arg index="1" value="270000"></constructor-arg>
		-->
		<!-- 
		<property name="speaker" ref="apple"></property>
		<property name="price" value="270000"></property>
	</bean>
	 -->
	 <!--
	<bean id="lg" class="polimorphism.LgTV" p:speaker-ref="sony" p:price="250000"></bean>
	
	<bean id="sony" class="polimorphism.SonySpeaker"></bean>
	<bean id="apple" class="polimorphism.AppleSpeaker"></bean>
	 -->
	 
	 
	 
	<!-- xml과도한 설정 부담감 -> 어노테이션 설정 지원, context 네임스페이스 추가 -->
	<!-- context component-scan : @Component가 설정된 클래스를 스캔하여 자동으로 객체 생성 -->
	<!--  base-package 로 시작하는 모든 패키지를 스캔대상으로 함-->
	
	<context:component-scan base-package="polimorphism"></context:component-scan>
	
	<!-- 의존성 주입 어노테이션 : @Autowired, @Inject @Qualifier @Resource -->
	<!-- @Autowired(멤버변수 위에 주로 사용) -->
	<!-- @Autowired 대상 타입의 객체가 두개 이상인 경우에는 @Qualifier("bean-id")를 함께 작성해서 구분 -->
	<!-- 또는 @Resource(name="bean-id") 사용 : 객체의 이름을 이용하여 의존성 주입 -->
	<!-- 또는 @Autowired 만 작성 후 apple, sony은 @Component설정 지우고 둘 중 하나만 xml 에 등록  -->
	<!-- 변경되지 않는 객체 : 어노테이션 / 변경가능성 있는 객체 XML사용  -->
	
	<!-- 
		@Component 를 상속한 어노테이션 (모든 클래스에 컴포넌트 할당하면 역할 파악 어려움)
		@Service : ******ServiceImpl   : 비지니스 로직 처리 
		@Repository : ******DAO        : DB연동처리 
		@Controller : ****Controller   : 사용자 요청 제어 
	 -->

</beans>
