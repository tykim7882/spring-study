<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

<!--  com.springbook.biz 패키지 범위의 어노테이션 스캔하여 객체생성 -->	
	<context:component-scan base-package="com.springbook.biz"></context:component-scan>

  <!-- 
	 <bean id="log" class="com.springbook.biz.common.Log4jAdvice"></bean>
	 <aop:config>
	 	<aop:pointcut id="allPointCut" 
	 	 expression="execution(* com.springbook.biz..*Impl.*(..))" />
	 	<aop:pointcut id="getPointCut" 
	 	 expression="execution(* com.springbook.biz..*Impl.get*(..))" />
	 	<aop:aspect ref="log">
	 		<aop:before pointcut-ref="allPointCut" method="printLogging"/>
	 		<aop:after pointcut-ref="getPointCut" method="printLoggingGetMethod"/>
	 	</aop:aspect>
	 </aop:config>
	  -->
	 
	 <!-- 공통 로그 설정 -->
	 <!-- joinpoint : 클라이언트가 호출하는 모든 비지니스 메소드 -->
	 <!-- pointcut: 필터링 된 조인포인트 -->
	 <!--  
	 * advice :  횡단관심에 해당하는 공통 기능의 코드, 독립된 클래스의 메소드로 작성 
	 동작시점 : before, after, after-running, after-throwing, around
	 
	 before: 비지니스 메소드 실행 전
	 after : 비지니스 메소드 실행 후 무조건 실행 
	 after-running : 비지니스 메소드가 성공적으로 리턴되면
	 after-throwing : 비지니스 메소드 실행 중 예외발생시 
	 around : 비지니스 메소드 실행 전후에 처리할 로직 삽입 가능 
	 (메소드 호출 자체 가로챔)
	 
	 * weaving : 포인트컷으로 지정한 핵심 관심 메소드가 호출될 때 ,
	 어드바이스에 해당하는 횡단관심 메소드가 삽입되는 과정 
	 
	 * aspect(advisor) : 포인트컷 + 어드바이스 
	 어떤 포인트컷 메소드에 대해 어떤 어드바이스 메소드를 실행할지 결정 
	 
	 * expression 표현식 
	  execution(* com.springbook.biz..*Impl.*(..))
	  - 리턴타입 (*, void, !void)
	  - 패키지 (*, .. 경로) 
	  ex) com.springbook.biz :  com.springbook.biz 패키지만
	      com.springbook.biz.. : com.springbook.biz 로 시작하는 모든 패키지
	      com.springbook..Impl : com.springbook 패키지로 시작하면서 마지막 패키지 이름이 Impl로 끝나는 패키지 
	  - 클래스 (*,+)
	  ex) BoardServiceImpl : BoardServiceImpl 클래스만 
	   *Impl : 클래스 이름이 Impl로 끝나는 클래스만 
	   BoardService+ :  BoardService로 파생된 모든 자식클래스 or 해당 인터페이스를 구현한 모든 클래스
	   - 메소드
	   ex) *(..) 모든 메소드 
	   get*(..) get으로 시작하는 모든 메소드 
	   - 매개변수
	   (..) 개수 타입 제약 없음
	   (*) 반드시 1개의 매개변수
	   (com.springbook.user.UsesrVO) UsesrVO를 매개변수로 갖는 메소드
	   (!com.springbook.user.UsesrVO) UsesrVO를 매개변수로 갖지않는 메소드
	   (Integer, ..) 1개이상의 매개변수 && 첫번째 매개변수는 int
	   (Integer, *) 2개의 매개변수 && 첫번째 매개변수는 int
	   
	   before, after, after-returning, after-throwing : JoinPoint
	   around : ProceedingJoinPoint
	   
	   * after-returning 특징
	   비지니스 메소드 수행 후 결과데이터 리턴값 -> 바인드변수 이용(Object)
	   <aop:after-returning .......... returning="바인드변수"
	   
	   *after-throwing 특징
	   비지니스 메소드 수행 시 예외정보를 확인 -> 바인드변수 이용(Exception)
	   <aop:after-throwing .......... throwing="바인드변수"
	 -->
	 <bean id="before" class="com.springbook.biz.common.BeforAdvice"></bean>
	 <aop:config>
	 	<aop:pointcut id="allPointCut" 
	 	expression="execution(* com.springbook.biz..*Impl.*(..))" />
	 	<aop:aspect ref="before">
	 		<aop:before pointcut-ref="allPointCut" method="beforeLog"/>
	 	</aop:aspect>
	 </aop:config>	
	 
	 <bean id="afterRetruning" class="com.springbook.biz.common.AfterReturningAdvice"></bean>
	 <bean id="around" class="com.springbook.biz.common.AroundAdvice"/>
	 <aop:config>
	 	<aop:pointcut id="getPointCut" 
		expression="execution(* com.springbook.biz..*Impl.get*(..))" />
	 	<aop:aspect ref="afterRetruning">
	 		<aop:after-returning pointcut-ref="getPointCut" method="afterLog" returning="returnObj"/>
	 	</aop:aspect>
	 	<aop:aspect ref="around">
	 		<aop:around pointcut-ref="getPointCut" method="aroudLog"/>
	 	</aop:aspect>
	 </aop:config>
	 
	 <bean id="afterThrowing" class="com.springbook.biz.common.AfterThrowingAdvice"></bean>
	 <bean id="after" class="com.springbook.biz.common.AfterAdvice"/>
	 <aop:config>
	 	<aop:pointcut id="exceptionPointCut" 
	 	expression="execution(* com.springbook.biz..*Impl.*(..))" />
	 	<aop:aspect ref="afterThrowing">
	 		<aop:after-throwing pointcut-ref="exceptionPointCut"  method="exceptionLog" throwing="exceptObj"/>
	 	</aop:aspect>
	 	<aop:aspect ref="after">
	 		<aop:after pointcut-ref="exceptionPointCut" method="finallyLog"/>
	 	</aop:aspect>
	 </aop:config>
	 <!-- 
	 어드바이스 객체의 아이디나 메소드 이름을 확인할 수 없는 경우
	 : ex) transaction
	  
	  <bean id="txManager" class="">
	  
	  </bean>
	 -->
	 
	 
	 
	 <!-- 어노테이션으로 변경함 
	<bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl" >
		<property name="userDAO" ref="userDAO"></property>
	</bean>
	
	<bean id="userDAO" class="com.springbook.biz.user.impl.UserDAO"/>
	 -->
</beans>
